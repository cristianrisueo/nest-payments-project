{
  "info": {
    "_postman_id": "a5d72f8e-3b4a-4f12-9e87-1c8d45e9f63a",
    "name": "Complete Payments API with JWT",
    "description": "Comprehensive API collection for testing the complete payments ecosystem with JWT authentication. Covers user authentication, token management, and secure payment operations.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "17000732"
  },
  "item": [
    {
      "name": "1. Authentication Setup",
      "item": [
        {
          "name": "1.1 Register Alice (Sender)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('aliceId', response.id);",
                  "    pm.test('Alice registered successfully', () => {",
                  "        pm.expect(response.id).to.be.a('string');",
                  "        pm.expect(response.email).to.eql('alice@payments.com');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alice@payments.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            }
          },
          "response": []
        },
        {
          "name": "1.2 Register Bob (Receiver)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('bobId', response.id);",
                  "    pm.test('Bob registered successfully', () => {",
                  "        pm.expect(response.id).to.be.a('string');",
                  "        pm.expect(response.email).to.eql('bob@payments.com');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"bob@payments.com\",\n  \"password\": \"SecurePass456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["users", "register"]
            }
          },
          "response": []
        },
        {
          "name": "1.3 Login Alice (Get JWT Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('aliceToken', response.accessToken);",
                  "    pm.test('Alice authenticated successfully', () => {",
                  "        pm.expect(response.isAuthenticated).to.be.true;",
                  "        pm.expect(response.accessToken).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alice@payments.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/authenticate",
              "host": ["{{baseUrl}}"],
              "path": ["users", "authenticate"]
            }
          },
          "response": []
        },
        {
          "name": "1.4 Login Bob (Get JWT Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('bobToken', response.accessToken);",
                  "    pm.test('Bob authenticated successfully', () => {",
                  "        pm.expect(response.isAuthenticated).to.be.true;",
                  "        pm.expect(response.accessToken).to.be.a('string');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"bob@payments.com\",\n  \"password\": \"SecurePass456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/authenticate",
              "host": ["{{baseUrl}}"],
              "path": ["users", "authenticate"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Authenticated User Operations",
      "item": [
        {
          "name": "2.1 Update Alice Balance ($100)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"balanceInCents\": 10000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{aliceId}}/balance",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{aliceId}}", "balance"]
            }
          },
          "response": []
        },
        {
          "name": "2.2 Update Bob Balance ($50)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{bobToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"balanceInCents\": 5000\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{bobId}}/balance",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{bobId}}", "balance"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Secure Payment Operations",
      "item": [
        {
          "name": "3.1 Send Payment ($25 Alice â†’ Bob)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('paymentId', response.id);",
                  "    pm.test('Payment created successfully', () => {",
                  "        pm.expect(response.id).to.be.a('string');",
                  "        pm.expect(response.status).to.eql('PENDING');",
                  "        pm.expect(response.amount).to.eql('$25.00');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromUserId\": \"{{aliceId}}\",\n  \"toUserId\": \"{{bobId}}\",\n  \"amountCents\": 2500,\n  \"currencyCode\": \"USD\",\n  \"paymentMethodType\": \"CREDIT_CARD\",\n  \"paymentMethodLastFour\": \"4532\",\n  \"description\": \"Dinner split payment\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": ["{{baseUrl}}"],
              "path": ["payments"]
            }
          },
          "response": []
        },
        {
          "name": "3.2 Get Payment Details (Alice)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments/{{paymentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "{{paymentId}}"]
            }
          },
          "response": []
        },
        {
          "name": "3.3 Process Payment (Alice)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Payment processed successfully', () => {",
                  "        pm.expect(response.status).to.eql('COMPLETED');",
                  "        pm.expect(response.senderNewBalance).to.eql('$75.00');",
                  "        pm.expect(response.receiverNewBalance).to.eql('$75.00');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments/{{paymentId}}/process",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "{{paymentId}}", "process"]
            }
          },
          "response": []
        },
        {
          "name": "3.4 Alice's Payment History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments/user/{{aliceId}}/history",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "user", "{{aliceId}}", "history"]
            }
          },
          "response": []
        },
        {
          "name": "3.5 Bob's Payment History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bobToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments/user/{{bobId}}/history",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "user", "{{bobId}}", "history"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Refund Operations",
      "item": [
        {
          "name": "4.1 Refund Payment (Alice)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('Payment refunded successfully', () => {",
                  "        pm.expect(response.status).to.eql('REFUNDED');",
                  "        pm.expect(response.refundedAmount).to.eql('$25.00');",
                  "        pm.expect(response.senderNewBalance).to.eql('$100.00');",
                  "        pm.expect(response.receiverNewBalance).to.eql('$50.00');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments/{{paymentId}}/refund",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "{{paymentId}}", "refund"]
            }
          },
          "response": []
        },
        {
          "name": "4.2 Verify Refund (Alice)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments/{{paymentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "{{paymentId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "5. Security Test Cases",
      "item": [
        {
          "name": "5.1 Unauthorized Payment Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/payments/{{paymentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "{{paymentId}}"]
            }
          },
          "response": []
        },
        {
          "name": "5.2 Bob Tries to Access Alice's Balance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bobToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{aliceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{aliceId}}"]
            }
          },
          "response": []
        },
        {
          "name": "5.3 Bob Tries to Send Payment from Alice",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{bobToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromUserId\": \"{{aliceId}}\",\n  \"toUserId\": \"{{bobId}}\",\n  \"amountCents\": 1000,\n  \"currencyCode\": \"USD\",\n  \"paymentMethodType\": \"CREDIT_CARD\",\n  \"paymentMethodLastFour\": \"1234\",\n  \"description\": \"Unauthorized payment attempt\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": ["{{baseUrl}}"],
              "path": ["payments"]
            }
          },
          "response": []
        },
        {
          "name": "5.4 Invalid JWT Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{aliceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{aliceId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "6. Final Balance Verification",
      "item": [
        {
          "name": "6.1 Check Alice Final Balance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{aliceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{aliceId}}"]
            }
          },
          "response": []
        },
        {
          "name": "6.2 Check Bob Final Balance",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bobToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{bobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{bobId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "7. Cleanup",
      "item": [
        {
          "name": "7.1 Delete Alice",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{aliceToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{aliceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{aliceId}}"]
            }
          },
          "response": []
        },
        {
          "name": "7.2 Delete Bob",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{bobToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{bobId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{bobId}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "aliceId",
      "value": "",
      "type": "string"
    },
    {
      "key": "bobId",
      "value": "",
      "type": "string"
    },
    {
      "key": "paymentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "aliceToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "bobToken",
      "value": "",
      "type": "string"
    }
  ]
}
