{
	"info": {
		"_postman_id": "a5d72f8e-3b4a-4f12-9e87-1c8d45e9f63a",
		"name": "Complete Payments API",
		"description": "Comprehensive API collection for testing the complete payments ecosystem with users and payment operations. Covers the full P2P payment lifecycle from user creation to payment processing and refunds.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17000732"
	},
	"item": [
		{
			"name": "1. Setup - Create Test Users",
			"item": [
				{
					"name": "1.1 Register Alice (Sender)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('aliceId', response.id);",
									"    pm.test('Alice registered successfully', () => {",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.email).to.eql('alice@payments.com');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"alice@payments.com\",\n  \"password\": \"SecurePass123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Register Bob (Receiver)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('bobId', response.id);",
									"    pm.test('Bob registered successfully', () => {",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.email).to.eql('bob@payments.com');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"bob@payments.com\",\n  \"password\": \"SecurePass456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 Update Alice Balance ($100)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"balanceInCents\": 10000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{aliceId}}/balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{aliceId}}",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 Update Bob Balance ($50)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"balanceInCents\": 5000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{bobId}}/balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{bobId}}",
								"balance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Payment Operations",
			"item": [
				{
					"name": "2.1 Send Payment ($25 Alice → Bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('paymentId', response.id);",
									"    pm.test('Payment created successfully', () => {",
									"        pm.expect(response.id).to.be.a('string');",
									"        pm.expect(response.status).to.eql('PENDING');",
									"        pm.expect(response.amount).to.eql('$25.00');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromUserId\": \"{{aliceId}}\",\n  \"toUserId\": \"{{bobId}}\",\n  \"amountCents\": 2500,\n  \"currencyCode\": \"USD\",\n  \"paymentMethodType\": \"CREDIT_CARD\",\n  \"paymentMethodLastFour\": \"4532\",\n  \"description\": \"Dinner split payment\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Get Payment Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/{{paymentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Process Payment (Execute Transfer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Payment processed successfully', () => {",
									"        pm.expect(response.status).to.eql('COMPLETED');",
									"        pm.expect(response.senderNewBalance).to.eql('$75.00');",
									"        pm.expect(response.receiverNewBalance).to.eql('$75.00');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/{{paymentId}}/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{paymentId}}",
								"process"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 Verify Alice's Payment History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/user/{{aliceId}}/history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"user",
								"{{aliceId}}",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 Verify Bob's Payment History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/user/{{bobId}}/history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"user",
								"{{bobId}}",
								"history"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Refund Operations",
			"item": [
				{
					"name": "3.1 Refund Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Payment refunded successfully', () => {",
									"        pm.expect(response.status).to.eql('REFUNDED');",
									"        pm.expect(response.refundedAmount).to.eql('$25.00');",
									"        pm.expect(response.senderNewBalance).to.eql('$100.00');",
									"        pm.expect(response.receiverNewBalance).to.eql('$50.00');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/{{paymentId}}/refund",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{paymentId}}",
								"refund"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 Verify Refund in Payment Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/{{paymentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Advanced Payment Scenarios",
			"item": [
				{
					"name": "4.1 Send Large Payment ($200 Alice → Bob)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('largePaymentId', response.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromUserId\": \"{{aliceId}}\",\n  \"toUserId\": \"{{bobId}}\",\n  \"amountCents\": 20000,\n  \"currencyCode\": \"USD\",\n  \"paymentMethodType\": \"BANK_TRANSFER\",\n  \"paymentMethodLastFour\": \"8901\",\n  \"description\": \"Large payment test\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "4.2 Try Processing (Should Fail - Insufficient Balance)",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/{{largePaymentId}}/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{largePaymentId}}",
								"process"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Error Cases",
			"item": [
				{
					"name": "5.1 Send Payment - Invalid Currency",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromUserId\": \"{{aliceId}}\",\n  \"toUserId\": \"{{bobId}}\",\n  \"amountCents\": 1000,\n  \"currencyCode\": \"INVALID\",\n  \"paymentMethodType\": \"CREDIT_CARD\",\n  \"paymentMethodLastFour\": \"1234\",\n  \"description\": \"Invalid currency test\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.2 Send Payment - Negative Amount",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fromUserId\": \"{{aliceId}}\",\n  \"toUserId\": \"{{bobId}}\",\n  \"amountCents\": -1000,\n  \"currencyCode\": \"USD\",\n  \"paymentMethodType\": \"CREDIT_CARD\",\n  \"paymentMethodLastFour\": \"1234\",\n  \"description\": \"Negative amount test\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.3 Get Payment - Non-existent ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/non-existent-payment-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"non-existent-payment-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.4 Process Payment - Invalid Transaction ID",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/invalid-transaction-id/process",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"invalid-transaction-id",
								"process"
							]
						}
					},
					"response": []
				},
				{
					"name": "5.5 Refund Payment - Already Refunded",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/payments/{{paymentId}}/refund",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{paymentId}}",
								"refund"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "6. User Balance Management",
			"item": [
				{
					"name": "6.1 Check Alice Final Balance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{aliceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{aliceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.2 Check Bob Final Balance",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{bobId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{bobId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6.3 Update Balance - Invalid Amount",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"balanceInCents\": -500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{aliceId}}/balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{aliceId}}",
								"balance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "7. Cleanup",
			"item": [
				{
					"name": "7.1 Delete Alice",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{aliceId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{aliceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "7.2 Delete Bob",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{bobId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{bobId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "aliceId",
			"value": "",
			"type": "string"
		},
		{
			"key": "bobId",
			"value": "",
			"type": "string"
		},
		{
			"key": "paymentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "largePaymentId",
			"value": "",
			"type": "string"
		}
	]
}